"use strict";(self.webpackChunkdbt_osmosis=self.webpackChunkdbt_osmosis||[]).push([[440],{3068:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"tutorial-yaml/workflow","title":"Workflow","description":"YAML Files","source":"@site/docs/tutorial-yaml/workflow.md","sourceDirName":"tutorial-yaml","slug":"/tutorial-yaml/workflow","permalink":"/dbt-osmosis/docs/tutorial-yaml/workflow","draft":false,"unlisted":false,"editUrl":"https://github.com/z3z1ma/dbt-osmosis/tree/main/docs/docs/tutorial-yaml/workflow.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Selection","permalink":"/dbt-osmosis/docs/tutorial-yaml/selection"}}');var r=n(4848),t=n(8453);const i={sidebar_position:5},l="Workflow",d={},c=[{value:"YAML Files",id:"yaml-files",level:2},{value:"Sources",id:"sources",level:3},{value:"Models",id:"models",level:3},{value:"Running dbt-osmosis",id:"running-dbt-osmosis",level:2},{value:"1. On-demand \u2b50\ufe0f",id:"1-on-demand-\ufe0f",level:3},{value:"2. Pre-commit hook \u2b50\ufe0f\u2b50\ufe0f",id:"2-pre-commit-hook-\ufe0f\ufe0f",level:3},{value:"3. CI/CD \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f",id:"3-cicd-\ufe0f\ufe0f\ufe0f",level:3}];function a(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"workflow",children:"Workflow"})}),"\n",(0,r.jsx)(s.h2,{id:"yaml-files",children:"YAML Files"}),"\n",(0,r.jsxs)(s.p,{children:["dbt-osmosis ",(0,r.jsx)(s.strong,{children:"manages"})," your YAML files in a ",(0,r.jsx)(s.strong,{children:"declarative"})," manner based on the configuration in your ",(0,r.jsx)(s.code,{children:"dbt_project.yml"}),". In many cases, you don\u2019t even have to manually create YAML files; dbt-osmosis will generate them on your behalf if they don\u2019t exist. Once established, any changes you make to these config rules are automatically enforced\u2014dbt-osmosis will move or merge YAML files accordingly."]}),"\n",(0,r.jsx)(s.h3,{id:"sources",children:"Sources"}),"\n",(0,r.jsxs)(s.p,{children:["By default, ",(0,r.jsx)(s.strong,{children:"dbt-osmosis"})," watches your sources from the ",(0,r.jsx)(s.strong,{children:"dbt manifest"}),". If you declare specific source paths under ",(0,r.jsx)(s.code,{children:"vars: dbt-osmosis: sources"}),", dbt-osmosis can:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Create"})," those YAML files if they don\u2019t exist yet (bootstrapping)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Synchronize"})," them with the ",(0,r.jsx)(s.strong,{children:"actual"})," database schema (pulling in missing columns unless you specify ",(0,r.jsx)(s.code,{children:"--skip-add-source-columns"}),")."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Migrate"})," them if you change where they\u2019re supposed to live (e.g., if you update ",(0,r.jsx)(s.code,{children:'path: "some/new/location.yml"'})," in ",(0,r.jsx)(s.code,{children:"dbt_project.yml"}),", dbt-osmosis will move it)."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Key benefit"}),": You never have to scaffold source YAML by hand. Merely define the path under ",(0,r.jsx)(s.code,{children:"vars: dbt-osmosis:"})," (and optionally a custom schema). If your source changes (columns, new tables), dbt-osmosis can detect and update the YAML to match."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",metastring:'title="dbt_project.yml"',children:'vars:\n  dbt-osmosis:\n    sources:\n      salesforce:\n        path: "staging/salesforce/source.yml"\n        schema: "salesforce_v2"\n      marketo: "staging/customer/marketo.yml"\n'})}),"\n",(0,r.jsx)(s.h3,{id:"models",children:"Models"}),"\n",(0,r.jsxs)(s.p,{children:["Similarly, ",(0,r.jsx)(s.strong,{children:"models"})," are managed based on your ",(0,r.jsx)(s.code,{children:"+dbt-osmosis"})," directives in ",(0,r.jsx)(s.code,{children:"dbt_project.yml"}),". For each folder (or subfolder) of models:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",metastring:'title="dbt_project.yml"',children:'models:\n  my_project:\n    +dbt-osmosis: "{parent}.yml"\n\n    intermediate:\n      +dbt-osmosis: "{node.config[materialized]}/{model}.yml"\n\n    # etc.\n\nseeds:\n  my_project:\n    # DON\'T FORGET: seeds need a +dbt-osmosis rule too!\n    +dbt-osmosis: "_schema.yml"\n'})}),"\n",(0,r.jsxs)(s.p,{children:["When you run ",(0,r.jsx)(s.code,{children:"dbt-osmosis yaml"})," commands (like ",(0,r.jsx)(s.code,{children:"refactor"}),", ",(0,r.jsx)(s.code,{children:"organize"}),", ",(0,r.jsx)(s.code,{children:"document"}),"):"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Missing"})," YAML files are automatically ",(0,r.jsx)(s.strong,{children:"bootstrapped"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:["dbt-osmosis merges or updates any ",(0,r.jsx)(s.strong,{children:"existing"})," ones."]}),"\n",(0,r.jsxs)(s.li,{children:["If you rename or move a model to a different folder (and thus a different ",(0,r.jsx)(s.code,{children:"+dbt-osmosis"})," rule), dbt-osmosis merges or moves the corresponding YAML to match."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["Because dbt-osmosis enforces your declared file paths, you ",(0,r.jsx)(s.strong,{children:"won\u2019t"})," inadvertently end up with duplicate or out-of-date YAML references."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"running-dbt-osmosis",children:"Running dbt-osmosis"}),"\n",(0,r.jsxs)(s.p,{children:["Whether you are focusing on daily doc updates or large-scale refactors, dbt-osmosis can be triggered in ",(0,r.jsx)(s.strong,{children:"three"})," common ways. You can pick whichever method suits your team\u2019s workflow best; they\u2019re not mutually exclusive."]}),"\n",(0,r.jsx)(s.h3,{id:"1-on-demand-\ufe0f",children:"1. On-demand \u2b50\ufe0f"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Simplest approach"}),": occasionally run dbt-osmosis when you want to tidy things up or ensure docs are current. For instance:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"# Example: refactor and see if changes occur\ndbt-osmosis yaml refactor --target prod --check\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Recommended usage"}),":"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Monthly or quarterly"})," \u201ccleanups\u201d"]}),"\n",(0,r.jsxs)(s.li,{children:["Ad hoc runs on a ",(0,r.jsx)(s.strong,{children:"feature branch"})," (review & merge the changes if they look good)"]}),"\n",(0,r.jsx)(s.li,{children:"Let developers manually run it whenever they have significantly changed schemas"}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["A single execution often yields ",(0,r.jsx)(s.strong,{children:"substantial"})," value by updating or reorganizing everything according to your rules."]}),"\n",(0,r.jsx)(s.h3,{id:"2-pre-commit-hook-\ufe0f\ufe0f",children:"2. Pre-commit hook \u2b50\ufe0f\u2b50\ufe0f"}),"\n",(0,r.jsxs)(s.p,{children:["To ",(0,r.jsx)(s.strong,{children:"automate"})," doc and schema alignment, you can add dbt-osmosis to your team\u2019s ",(0,r.jsx)(s.strong,{children:"pre-commit"})," hooks. It will run automatically whenever you commit any ",(0,r.jsx)(s.code,{children:".sql"})," files in, say, ",(0,r.jsx)(s.code,{children:"models/"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",metastring:'title=".pre-commit-config.yaml"',children:"repos:\n  - repo: https://github.com/z3z1ma/dbt-osmosis\n    rev: v1.1.5\n    hooks:\n      - id: dbt-osmosis\n        files: ^models/\n        # Optionally specify any arguments, e.g. production target:\n        args: [--target=prod]\n        additional_dependencies: [dbt-<adapter>]\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Pro"}),": Docs never go stale because every commit updates them.\n",(0,r.jsx)(s.strong,{children:"Con"}),": Slight overhead on each commit, but typically manageable if you filter only changed models."]}),"\n",(0,r.jsx)(s.h3,{id:"3-cicd-\ufe0f\ufe0f\ufe0f",children:"3. CI/CD \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f"}),"\n",(0,r.jsxs)(s.p,{children:["You can also integrate dbt-osmosis into your ",(0,r.jsx)(s.strong,{children:"continuous integration"})," pipeline. For example, a GitHub Action or a standalone script might:"]}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:"Clone your repo into a CI environment."}),"\n",(0,r.jsxs)(s.li,{children:["Run ",(0,r.jsx)(s.code,{children:"dbt-osmosis yaml refactor"}),"."]}),"\n",(0,r.jsx)(s.li,{children:"Commit any resulting changes back to a branch or open a pull request."}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",metastring:'title="example.sh"',children:'git clone https://github.com/my-org/my-dbt-project.git\ncd my-dbt-project\ngit checkout -b dbt-osmosis-refactor\n\ndbt-osmosis yaml refactor --target=prod\n\ngit commit -am "\u2728 dbt-osmosis refactor"\ngit push origin -f\ngh pr create\n'})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Pros"}),":"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Automated and ",(0,r.jsx)(s.strong,{children:"reviewable"})," in a PR."]}),"\n",(0,r.jsx)(s.li,{children:"Takes the load off dev machines by running it in a controlled environment."}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Cons"}),":"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Requires some CI setup."}),"\n",(0,r.jsx)(s.li,{children:"Devs must remember to review and merge the PR."}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"In summary"}),", dbt-osmosis fits a wide range of workflows. Whether you run it on-demand, as a pre-commit hook, or integrated into a CI pipeline, you\u2019ll enjoy a consistent, automated approach to maintaining and updating your dbt YAML files for both ",(0,r.jsx)(s.strong,{children:"sources"})," and ",(0,r.jsx)(s.strong,{children:"models"}),"."]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>l});var o=n(6540);const r={},t=o.createContext(r);function i(e){const s=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(t.Provider,{value:s},e.children)}}}]);