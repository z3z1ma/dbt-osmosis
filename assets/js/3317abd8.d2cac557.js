"use strict";(self.webpackChunkdbt_osmosis=self.webpackChunkdbt_osmosis||[]).push([[600],{3184:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"tutorial-yaml/selection","title":"Selection","description":"When you run dbt-osmosis commands like yaml refactor, yaml organize, or yaml document, you typically want to narrow the scope to some subset of models or sources in your project. This helps you:","source":"@site/docs/tutorial-yaml/selection.md","sourceDirName":"tutorial-yaml","slug":"/tutorial-yaml/selection","permalink":"/dbt-osmosis/docs/tutorial-yaml/selection","draft":false,"unlisted":false,"editUrl":"https://github.com/z3z1ma/dbt-osmosis/tree/main/docs/docs/tutorial-yaml/selection.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Inheritance","permalink":"/dbt-osmosis/docs/tutorial-yaml/inheritance"},"next":{"title":"Workflow","permalink":"/dbt-osmosis/docs/tutorial-yaml/workflow"}}');var l=n(4848),i=n(8453);const r={sidebar_position:4},t="Selection",c={},d=[{value:"1. Positional Selectors",id:"1-positional-selectors",level:2},{value:"Example Commands",id:"example-commands",level:3},{value:"Using Globs",id:"using-globs",level:4},{value:"Absolute Paths",id:"absolute-paths",level:4},{value:"How dbt-osmosis Interprets Positional Selectors",id:"how-dbt-osmosis-interprets-positional-selectors",level:3},{value:"2. The <code>--fqn</code> Flag",id:"2-the---fqn-flag",level:2},{value:"Why Use <code>--fqn</code>?",id:"why-use---fqn",level:3},{value:"Example",id:"example",level:3},{value:"Edge Cases / Limitations",id:"edge-cases--limitations",level:3},{value:"Which Should I Use?",id:"which-should-i-use",level:2},{value:"Putting It All Together",id:"putting-it-all-together",level:2}];function a(e){const s={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(s.header,{children:(0,l.jsx)(s.h1,{id:"selection",children:"Selection"})}),"\n",(0,l.jsxs)(s.p,{children:["When you run ",(0,l.jsx)(s.strong,{children:"dbt-osmosis"})," commands like ",(0,l.jsx)(s.code,{children:"yaml refactor"}),", ",(0,l.jsx)(s.code,{children:"yaml organize"}),", or ",(0,l.jsx)(s.code,{children:"yaml document"}),", you typically want to narrow the scope to ",(0,l.jsx)(s.strong,{children:"some"})," subset of models or sources in your project. This helps you:"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsx)(s.li,{children:"Focus on a subset of changes rather than the entire project."}),"\n",(0,l.jsx)(s.li,{children:"Speed up refactoring or documentation runs."}),"\n",(0,l.jsx)(s.li,{children:"Reduce noise or risk when iterating incrementally."}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:["dbt-osmosis provides ",(0,l.jsx)(s.strong,{children:"two"})," major strategies for doing this:"]}),"\n",(0,l.jsxs)(s.ol,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"Positional Selectors"})," (recommended)"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsxs)(s.strong,{children:[(0,l.jsx)(s.code,{children:"--fqn"})," Flag"]})," (for advanced users or special cases)"]}),"\n"]}),"\n",(0,l.jsx)(s.h2,{id:"1-positional-selectors",children:"1. Positional Selectors"}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.strong,{children:"Positional selectors"})," are the ",(0,l.jsx)(s.strong,{children:"non-flag arguments"})," you provide after the command. They\u2019re interpreted as ",(0,l.jsx)(s.strong,{children:"paths or model names"}),". The underlying logic tries to match each positional argument to:"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["A model name (like ",(0,l.jsx)(s.code,{children:"stg_customers"}),")"]}),"\n",(0,l.jsxs)(s.li,{children:["A file path (like ",(0,l.jsx)(s.code,{children:"models/staging/stg_customers.sql"}),")"]}),"\n",(0,l.jsxs)(s.li,{children:["A directory path (like ",(0,l.jsx)(s.code,{children:"models/staging"}),")"]}),"\n",(0,l.jsxs)(s.li,{children:["A file glob (like ",(0,l.jsx)(s.code,{children:"marts/**/*.sql"}),")"]}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:["In other words, anything that isn\u2019t prefixed with ",(0,l.jsx)(s.code,{children:"--"})," is treated as a ",(0,l.jsx)(s.em,{children:"positional path or node name"})," that dbt-osmosis will attempt to match against your project."]}),"\n",(0,l.jsx)(s.h3,{id:"example-commands",children:"Example Commands"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-bash",children:"# Select all models in the models/staging directory\ndbt-osmosis yaml refactor models/staging\n"})}),"\n",(0,l.jsxs)(s.p,{children:["In this case, dbt-osmosis processes ",(0,l.jsx)(s.strong,{children:"all"})," ",(0,l.jsx)(s.code,{children:".sql"})," files recognized as dbt models in ",(0,l.jsx)(s.code,{children:"models/staging"}),". Similarly:"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-bash",children:"# Select only one model if the name is stg_customers and it exists\ndbt-osmosis yaml refactor stg_customers\n"})}),"\n",(0,l.jsxs)(s.p,{children:["dbt-osmosis looks for a node with the ",(0,l.jsx)(s.strong,{children:"exact"})," name ",(0,l.jsx)(s.code,{children:"stg_customers"}),". If found, it processes ",(0,l.jsx)(s.strong,{children:"just"})," that single model. If the name doesn\u2019t match a known node, dbt-osmosis checks if there\u2019s a path or file called ",(0,l.jsx)(s.code,{children:"stg_customers"}),". If that fails, no models are selected."]}),"\n",(0,l.jsx)(s.h4,{id:"using-globs",children:"Using Globs"}),"\n",(0,l.jsx)(s.p,{children:"If your shell supports wildcards or recursive globs:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-bash",children:"# Recursively select all .sql models in marts/ subdirectories\ndbt-osmosis yaml refactor marts/**/*.sql\n"})}),"\n",(0,l.jsxs)(s.p,{children:["This is equivalent to selecting every ",(0,l.jsx)(s.code,{children:".sql"})," file under ",(0,l.jsx)(s.code,{children:"marts/"})," at ",(0,l.jsx)(s.strong,{children:"any"})," nested level."]}),"\n",(0,l.jsx)(s.h4,{id:"absolute-paths",children:"Absolute Paths"}),"\n",(0,l.jsxs)(s.p,{children:["You can also supply ",(0,l.jsx)(s.strong,{children:"absolute"})," or relative paths. For example:"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-bash",children:"dbt-osmosis yaml refactor /full/path/to/my_project/models/staging/*.sql\n"})}),"\n",(0,l.jsxs)(s.p,{children:["If dbt-osmosis recognizes those ",(0,l.jsx)(s.code,{children:".sql"})," files as part of your current dbt project, it will include them."]}),"\n",(0,l.jsx)(s.h3,{id:"how-dbt-osmosis-interprets-positional-selectors",children:"How dbt-osmosis Interprets Positional Selectors"}),"\n",(0,l.jsxs)(s.ol,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"Exact Node Name Check"}),": If the positional argument ",(0,l.jsx)(s.strong,{children:"directly matches"})," a known model name (like ",(0,l.jsx)(s.code,{children:"stg_customers"}),"), dbt-osmosis picks that node."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"File or Directory Check"}),": If the argument is a valid path (relative or absolute), dbt-osmosis includes all recognized ",(0,l.jsx)(s.code,{children:".sql"})," models beneath it (or the file itself if it\u2019s a single ",(0,l.jsx)(s.code,{children:".sql"}),")."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"Glob Expansion"}),": If your shell expands the glob, dbt-osmosis picks each resulting path that maps to a dbt model."]}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:["This approach is ",(0,l.jsx)(s.strong,{children:"intuitive"}),", typically what you\u2019d want for partial refactors, and is less error-prone than advanced flags."]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsxs)(s.h2,{id:"2-the---fqn-flag",children:["2. The ",(0,l.jsx)(s.code,{children:"--fqn"})," Flag"]}),"\n",(0,l.jsx)(s.admonition,{title:"Caution",type:"caution",children:(0,l.jsxs)(s.p,{children:["This may be ",(0,l.jsx)(s.strong,{children:"deprecated"})," in the future. We recommend positional selectors first."]})}),"\n",(0,l.jsxs)(s.p,{children:["The ",(0,l.jsx)(s.strong,{children:(0,l.jsx)(s.code,{children:"--fqn"})})," flag provides an alternative approach. An ",(0,l.jsx)(s.strong,{children:"FQN"})," (fully qualified name) in dbt typically includes:"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsx)(s.li,{children:"The project name"}),"\n",(0,l.jsxs)(s.li,{children:["The resource type (",(0,l.jsx)(s.code,{children:"model"}),", ",(0,l.jsx)(s.code,{children:"source"}),", or ",(0,l.jsx)(s.code,{children:"seed"}),")"]}),"\n",(0,l.jsx)(s.li,{children:"Subfolders or packages leading to the node"}),"\n",(0,l.jsx)(s.li,{children:"The final node name"}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:["In dbt-osmosis, we ",(0,l.jsx)(s.strong,{children:"omit"})," the project name and resource type segments, focusing only on the latter parts of the FQN. For instance, if ",(0,l.jsx)(s.code,{children:"dbt ls"})," returns:"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{children:"my_project.model.staging.salesforce.contacts\n"})}),"\n",(0,l.jsx)(s.p,{children:"You could specify:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-bash",children:"dbt-osmosis yaml refactor --fqn=staging.salesforce.contacts\n"})}),"\n",(0,l.jsx)(s.p,{children:"And dbt-osmosis would match precisely that node. Or:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-bash",children:"dbt-osmosis yaml refactor --fqn=staging.salesforce\n"})}),"\n",(0,l.jsxs)(s.p,{children:["This would select ",(0,l.jsx)(s.strong,{children:"all"})," nodes under ",(0,l.jsx)(s.code,{children:"staging.salesforce.*"}),", effectively everything in the ",(0,l.jsx)(s.code,{children:"staging/salesforce"})," sub-tree."]}),"\n",(0,l.jsxs)(s.h3,{id:"why-use---fqn",children:["Why Use ",(0,l.jsx)(s.code,{children:"--fqn"}),"?"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"Precise FQN-based"})," selection."]}),"\n",(0,l.jsxs)(s.li,{children:["If you\u2019re comfortable with dbt\u2019s concept of FQNs, it can be simpler to copy/paste from ",(0,l.jsx)(s.code,{children:"dbt ls"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"Partial segments"}),": You might not remember the exact file path, but you know the dbt FQN you want."]}),"\n"]}),"\n",(0,l.jsx)(s.h3,{id:"example",children:"Example"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-bash",children:"dbt-osmosis yaml refactor --fqn=marts.sales.customers\n"})}),"\n",(0,l.jsxs)(s.p,{children:["If your project is named ",(0,l.jsx)(s.code,{children:"my_project"}),", dbt-osmosis internally interprets that as ",(0,l.jsx)(s.code,{children:"my_project.model.marts.sales.customers"}),"\u2014",(0,l.jsx)(s.strong,{children:"only"})," that single model. Or:"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-bash",children:"dbt-osmosis yaml refactor --fqn=staging.salesforce\n"})}),"\n",(0,l.jsxs)(s.p,{children:["It selects ",(0,l.jsx)(s.strong,{children:"any"})," model where the FQN starts with ",(0,l.jsx)(s.code,{children:"staging.salesforce"}),", capturing all models in your ",(0,l.jsx)(s.code,{children:"staging/salesforce/"})," subfolder."]}),"\n",(0,l.jsx)(s.h3,{id:"edge-cases--limitations",children:"Edge Cases / Limitations"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["We assume you\u2019re only dealing with models or sources from the ",(0,l.jsx)(s.strong,{children:"current"})," project (not upstream packages)."]}),"\n",(0,l.jsx)(s.li,{children:"If multiple subfolders share the same partial FQN, you might get more matches than expected\u2014though that\u2019s relatively uncommon if your dbt naming is well-structured."}),"\n"]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h2,{id:"which-should-i-use",children:"Which Should I Use?"}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.strong,{children:"For 90% of use cases"}),", ",(0,l.jsx)(s.strong,{children:"positional selectors"})," are easiest and more future-proof, since ",(0,l.jsx)(s.code,{children:"--fqn"})," may be deprecated. Simply specifying the path or the node name is generally enough. However, if you have advanced use cases or find it more convenient to copy/paste FQNs from ",(0,l.jsx)(s.code,{children:"dbt ls"}),", then ",(0,l.jsx)(s.code,{children:"--fqn"})," remains a viable option."]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h2,{id:"putting-it-all-together",children:"Putting It All Together"}),"\n",(0,l.jsx)(s.p,{children:"Here\u2019s a quick run-down of typical usage patterns:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.strong,{children:"One folder at a time"}),":"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-bash",children:"dbt-osmosis yaml refactor models/staging\n"})}),"\n"]}),"\n",(0,l.jsxs)(s.li,{children:["\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.strong,{children:"One specific model"}),":"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-bash",children:"dbt-osmosis yaml document stg_customers\n"})}),"\n"]}),"\n",(0,l.jsxs)(s.li,{children:["\n",(0,l.jsxs)(s.p,{children:[(0,l.jsxs)(s.strong,{children:["All .sql files in ",(0,l.jsx)(s.code,{children:"marts"})]}),":"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-bash",children:"dbt-osmosis yaml organize marts/*.sql\n"})}),"\n"]}),"\n",(0,l.jsxs)(s.li,{children:["\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.strong,{children:"A partial FQN for multiple subfolders"}),":"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-bash",children:"dbt-osmosis yaml refactor --fqn=staging\n"})}),"\n",(0,l.jsxs)(s.p,{children:["(selects ",(0,l.jsx)(s.em,{children:"all"})," staging models)"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:["Regardless of your approach, dbt-osmosis will do its usual work of ",(0,l.jsx)(s.strong,{children:"refactoring"})," or ",(0,l.jsx)(s.strong,{children:"documenting"})," or ",(0,l.jsx)(s.strong,{children:"organizing"})," whichever subset of models (and sources, if relevant) match your selection criteria."]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.strong,{children:"In summary"}),", the ",(0,l.jsx)(s.strong,{children:"Selection"})," mechanism in dbt-osmosis is flexible enough to handle both straightforward file-based filters and advanced FQN-based filters. Use ",(0,l.jsx)(s.strong,{children:"positional selectors"})," for most tasks, and consider ",(0,l.jsx)(s.code,{children:"--fqn"})," if you have a specific workflow that benefits from it. This ensures you only run dbt-osmosis on ",(0,l.jsx)(s.strong,{children:"exactly"})," the nodes you care about."]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,l.jsx)(s,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>t});var o=n(6540);const l={},i=o.createContext(l);function r(e){const s=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),o.createElement(i.Provider,{value:s},e.children)}}}]);