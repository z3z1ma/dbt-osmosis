"use strict";(self.webpackChunkdbt_osmosis=self.webpackChunkdbt_osmosis||[]).push([[990],{3511:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"tutorial-basics/commands","title":"CLI Overview","description":"Below is a high-level overview of the commands currently provided by dbt-osmosis. Each command also supports additional options such as:","source":"@site/docs/tutorial-basics/commands.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/commands","permalink":"/dbt-osmosis/docs/tutorial-basics/commands","draft":false,"unlisted":false,"editUrl":"https://github.com/z3z1ma/dbt-osmosis/tree/main/docs/docs/tutorial-basics/commands.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/dbt-osmosis/docs/tutorial-basics/installation"},"next":{"title":"dbt-osmosis - YAML","permalink":"/dbt-osmosis/docs/category/dbt-osmosis---yaml"}}');var o=n(4848),r=n(8453);const l={sidebar_position:2},t="CLI Overview",d={},c=[{value:"YAML Management",id:"yaml-management",level:2},{value:"Organize",id:"organize",level:3},{value:"Document",id:"document",level:3},{value:"Refactor",id:"refactor",level:3},{value:"Commonly Used Flags in YAML Commands",id:"commonly-used-flags-in-yaml-commands",level:3},{value:"Synthesis (Experimental)",id:"synthesis-experimental",level:3},{value:"SQL",id:"sql",level:2},{value:"Run",id:"run",level:3},{value:"Compile",id:"compile",level:3},{value:"Workbench",id:"workbench",level:2}];function a(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsx)(s.h1,{id:"cli-overview",children:"CLI Overview"})}),"\n",(0,o.jsx)(s.p,{children:"Below is a high-level overview of the commands currently provided by dbt-osmosis. Each command also supports additional options such as:"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--dry-run"})," to prevent writing changes to disk"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--check"})," to exit with a non-zero code if changes would have been made"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--fqn"})," to filter nodes by ",(0,o.jsx)(s.a,{href:"https://docs.getdbt.com/reference/node-selection/syntax#the-fqn-method",children:"dbt's FQN"})," segments"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--disable-introspection"})," to run without querying the warehouse (helpful if you are offline), often paired with ",(0,o.jsx)(s.code,{children:"--catalog-path"})]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--catalog-path"})," to read columns from a prebuilt ",(0,o.jsx)(s.code,{children:"catalog.json"})]}),"\n"]}),"\n",(0,o.jsx)(s.p,{children:"Other helpful flags are described in each command below."}),"\n",(0,o.jsx)(s.h2,{id:"yaml-management",children:"YAML Management"}),"\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.strong,{children:"All of the following commands live under"})," ",(0,o.jsx)(s.code,{children:"dbt-osmosis yaml <command>"}),"."]}),"\n",(0,o.jsx)(s.h3,{id:"organize",children:"Organize"}),"\n",(0,o.jsxs)(s.p,{children:["Restructures your schema YAML files based on the ",(0,o.jsx)(s.strong,{children:"declarative"})," configuration in ",(0,o.jsx)(s.code,{children:"dbt_project.yml"}),". Specifically, it:"]}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:"Bootstraps missing YAML files for any undocumented models or sources"}),"\n",(0,o.jsxs)(s.li,{children:["Moves or merges existing YAML files according to your configured rules (the ",(0,o.jsx)(s.code,{children:"+dbt-osmosis:"})," keys)"]}),"\n"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"dbt-osmosis yaml organize [--project-dir] [--profiles-dir] [--target] [--fqn ...] [--dry-run] [--check]\n"})}),"\n",(0,o.jsx)(s.p,{children:"Options often used:"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--auto-apply"})," to apply all file location changes without asking for confirmation"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--disable-introspection"})," + ",(0,o.jsx)(s.code,{children:"--catalog-path=/path/to/catalog.json"})," if not connected to a warehouse"]}),"\n"]}),"\n",(0,o.jsx)(s.h3,{id:"document",children:"Document"}),"\n",(0,o.jsx)(s.p,{children:"Passes down column-level documentation from upstream nodes to downstream nodes (a deep inheritance). Specifically, it can:"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:["Add columns that are present in the database (or ",(0,o.jsx)(s.code,{children:"catalog.json"}),") but missing from your YAML"]}),"\n",(0,o.jsx)(s.li,{children:"Remove columns missing from your database (optional, if used with other steps)"}),"\n",(0,o.jsx)(s.li,{children:"Reorder columns (optional, if combined with your sorting preference\u2014see below)"}),"\n",(0,o.jsx)(s.li,{children:"Inherit tags, descriptions, and meta fields from upstream models"}),"\n"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"dbt-osmosis yaml document [--project-dir] [--profiles-dir] [--target] [--fqn ...] [--dry-run] [--check]\n"})}),"\n",(0,o.jsx)(s.p,{children:"Options often used:"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--force-inherit-descriptions"})," to override ",(0,o.jsx)(s.em,{children:"existing"})," descriptions if they are placeholders"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--use-unrendered-descriptions"})," so that you can propagate Jinja-based docs (like ",(0,o.jsx)(s.code,{children:"{{ doc(...) }}"}),")"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--skip-add-columns"}),", ",(0,o.jsx)(s.code,{children:"--skip-add-data-types"}),", ",(0,o.jsx)(s.code,{children:"--skip-merge-meta"}),", ",(0,o.jsx)(s.code,{children:"--skip-add-tags"}),", etc., if you want to limit changes"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--synthesize"})," to autogenerate missing documentation with ChatGPT/OpenAI (see ",(0,o.jsx)(s.em,{children:"Synthesis"})," below)"]}),"\n"]}),"\n",(0,o.jsx)(s.h3,{id:"refactor",children:"Refactor"}),"\n",(0,o.jsxs)(s.p,{children:["The ",(0,o.jsx)(s.strong,{children:"combination"})," of both ",(0,o.jsx)(s.code,{children:"organize"})," and ",(0,o.jsx)(s.code,{children:"document"})," in the correct order. Typically the recommended command to run:"]}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:["Creates or moves YAML files to match your ",(0,o.jsx)(s.code,{children:"dbt_project.yml"})," rules"]}),"\n",(0,o.jsx)(s.li,{children:"Ensures columns are up to date with warehouse or catalog"}),"\n",(0,o.jsx)(s.li,{children:"Inherits descriptions and metadata"}),"\n",(0,o.jsx)(s.li,{children:"Reorders columns if desired"}),"\n"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"dbt-osmosis yaml refactor [--project-dir] [--profiles-dir] [--target] [--fqn ...] [--dry-run] [--check]\n"})}),"\n",(0,o.jsx)(s.p,{children:"Options often used:"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:(0,o.jsx)(s.code,{children:"--auto-apply"})}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--force-inherit-descriptions"}),", ",(0,o.jsx)(s.code,{children:"--use-unrendered-descriptions"})]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--skip-add-data-types"}),", ",(0,o.jsx)(s.code,{children:"--skip-add-columns"}),", etc."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--synthesize"})," to autogenerate missing documentation with ChatGPT/OpenAI"]}),"\n"]}),"\n",(0,o.jsx)(s.h3,{id:"commonly-used-flags-in-yaml-commands",children:"Commonly Used Flags in YAML Commands"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--fqn=staging.some_subfolder"})," to limit to a particular subfolder or results of dbt ls"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--check"})," to fail your CI if dbt-osmosis ",(0,o.jsx)(s.em,{children:"would"})," make changes"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--dry-run"})," to preview changes without writing them to disk"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--catalog-path=target/catalog.json"})," to avoid live queries"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--disable-introspection"})," to skip warehouse queries entirely"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"--auto-apply"})," to skip manual confirmation for file moves"]}),"\n"]}),"\n",(0,o.jsx)(s.h3,{id:"synthesis-experimental",children:"Synthesis (Experimental)"}),"\n",(0,o.jsxs)(s.p,{children:["If you pass the ",(0,o.jsx)(s.code,{children:"--synthesize"})," flag to ",(0,o.jsx)(s.code,{children:"dbt-osmosis yaml refactor"})," (or ",(0,o.jsx)(s.code,{children:"document"}),"), dbt-osmosis will attempt to ",(0,o.jsx)(s.strong,{children:"generate missing documentation"})," using OpenAI's API (like ChatGPT). You will need to have installed with the ",(0,o.jsx)(s.code,{children:"[openai]"})," extra:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:'pip install "dbt-osmosis[openai]"\n'})}),"\n",(0,o.jsx)(s.p,{children:"This feature can make large-scale doc scaffolding easier, but always review and refine any auto-generated text!"}),"\n",(0,o.jsx)(s.h2,{id:"sql",children:"SQL"}),"\n",(0,o.jsx)(s.p,{children:"These commands let you compile or run SQL snippets (including Jinja) directly:"}),"\n",(0,o.jsx)(s.h3,{id:"run",children:"Run"}),"\n",(0,o.jsx)(s.p,{children:"Runs a SQL statement or a dbt Jinja-based query."}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"dbt-osmosis sql run \"select * from {{ ref('my_model') }} limit 50\"\n"})}),"\n",(0,o.jsxs)(s.p,{children:["Returns results in tabular format to stdout. Use ",(0,o.jsx)(s.code,{children:"--threads"})," to run multiple queries in parallel (though typically you\u2019d run one statement at a time)."]}),"\n",(0,o.jsx)(s.h3,{id:"compile",children:"Compile"}),"\n",(0,o.jsx)(s.p,{children:"Compiles a SQL statement (including Jinja) but doesn\u2019t run it. Useful for quickly validating macros, refs, or Jinja logic:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"dbt-osmosis sql compile \"select * from {{ ref('my_model') }}\"\n"})}),"\n",(0,o.jsx)(s.p,{children:"Prints the compiled SQL to stdout."}),"\n",(0,o.jsx)(s.h2,{id:"workbench",children:"Workbench"}),"\n",(0,o.jsxs)(s.p,{children:["Launches a ",(0,o.jsx)(s.a,{href:"https://streamlit.io/",children:"Streamlit"})," application that:"]}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:"Lets you explore and run queries against your dbt models in a REPL-like environment"}),"\n",(0,o.jsx)(s.li,{children:"Provides side-by-side compiled SQL"}),"\n",(0,o.jsx)(s.li,{children:"Offers real-time iteration on queries"}),"\n"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"dbt-osmosis workbench [--project-dir] [--profiles-dir] [--host] [--port]\n"})})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>t});var i=n(6540);const o={},r=i.createContext(o);function l(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);