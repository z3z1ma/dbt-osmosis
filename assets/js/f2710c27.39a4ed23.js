"use strict";(self.webpackChunkdbt_osmosis=self.webpackChunkdbt_osmosis||[]).push([[321],{4136:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>t});const i=JSON.parse('{"id":"migrating","title":"Migration Guide: Upgrading to dbt-osmosis 1.x.x","description":"1. Changes to vars.dbt-osmosis Structure","source":"@site/docs/migrating.md","sourceDirName":".","slug":"/migrating","permalink":"/dbt-osmosis/docs/migrating","draft":false,"unlisted":false,"editUrl":"https://github.com/z3z1ma/dbt-osmosis/tree/main/docs/docs/migrating.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Workflow","permalink":"/dbt-osmosis/docs/tutorial-yaml/workflow"}}');var r=n(4848),o=n(8453);const l={sidebar_position:4},d="Migration Guide: Upgrading to dbt-osmosis 1.x.x",c={},t=[{value:"1. Changes to <code>vars.dbt-osmosis</code> Structure",id:"1-changes-to-varsdbt-osmosis-structure",level:2},{value:"Why It\u2019s Breaking",id:"why-its-breaking",level:3},{value:"2. Renamed CLI Flags",id:"2-renamed-cli-flags",level:2},{value:"3. <code>--auto-apply</code> Prompt for File Moves",id:"3---auto-apply-prompt-for-file-moves",level:2},{value:"<code>--auto-apply</code>",id:"--auto-apply",level:3},{value:"4. Seeds Must Have <code>+dbt-osmosis: &lt;path&gt;</code>",id:"4-seeds-must-have-dbt-osmosis-path",level:2},{value:"5. More Flexible Configuration Resolution",id:"5-more-flexible-configuration-resolution",level:2},{value:"6. Inheritance Defaults: No Overwriting Child Docs Without <code>--force-inherit-descriptions</code>",id:"6-inheritance-defaults-no-overwriting-child-docs-without---force-inherit-descriptions",level:2},{value:"7. New Plugin System for Fuzzy Matching",id:"7-new-plugin-system-for-fuzzy-matching",level:2},{value:"8. Potential PyPI Release Changes",id:"8-potential-pypi-release-changes",level:2},{value:"Recommended Upgrade Steps",id:"recommended-upgrade-steps",level:2}];function a(e){const s={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"migration-guide-upgrading-to-dbt-osmosis-1xx",children:"Migration Guide: Upgrading to dbt-osmosis 1.x.x"})}),"\n",(0,r.jsxs)(s.h2,{id:"1-changes-to-varsdbt-osmosis-structure",children:["1. Changes to ",(0,r.jsx)(s.code,{children:"vars.dbt-osmosis"})," Structure"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Old"})," (pre\u20131.x.x):"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:"vars:\n  dbt-osmosis:\n    # everything was directly under dbt-osmosis\n    <source_name>: ...\n    _blacklist:\n      - ...\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"New"})," (1.x.x+):"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:"vars:\n  dbt-osmosis:\n    sources:\n      <source_name>: ...\n    column_ignore_patterns:\n      - ...\n    yaml_settings:\n      <kwargs for ruamel.yaml>\n"})}),"\n",(0,r.jsx)(s.h3,{id:"why-its-breaking",children:"Why It\u2019s Breaking"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Previously, users placed all source definitions ",(0,r.jsx)(s.strong,{children:"directly"})," under ",(0,r.jsx)(s.code,{children:"vars.dbt-osmosis"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:["Now, all source definitions ",(0,r.jsx)(s.strong,{children:"must"})," be nested under ",(0,r.jsx)(s.code,{children:"vars.dbt-osmosis.sources"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:["Other keys like ",(0,r.jsx)(s.code,{children:"column_ignore_patterns"})," and ",(0,r.jsx)(s.code,{children:"yaml_settings"})," now have ",(0,r.jsx)(s.strong,{children:"their own"})," top-level keys under ",(0,r.jsx)(s.code,{children:"dbt-osmosis"}),", instead of living in the same dict."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Migration"}),": If your ",(0,r.jsx)(s.code,{children:"dbt_project.yml"})," currently has a line like:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:'vars:\n  dbt-osmosis:\n    salesforce: "staging/salesforce/source.yml"\n    # ...\n'})}),"\n",(0,r.jsxs)(s.p,{children:["You must nest that under ",(0,r.jsx)(s.code,{children:"sources:"}),":"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:'vars:\n  dbt-osmosis:\n    sources:\n      salesforce: "staging/salesforce/source.yml"\n    # ...\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"2-renamed-cli-flags",children:"2. Renamed CLI Flags"}),"\n",(0,r.jsx)(s.p,{children:"The following CLI flags have been renamed for clarity:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"--char-length"})," \u2192 ",(0,r.jsx)(s.code,{children:"--string-length"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"--numeric-precision"})," \u2192 ",(0,r.jsx)(s.code,{children:"--numeric-precision-and-scale"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"--catalog-file"})," \u2192 ",(0,r.jsx)(s.code,{children:"--catalog-path"})]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"If you scripted these old flags, update them to the new names:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"# Old (pre-1.x.x)\ndbt-osmosis yaml refactor --char-length --catalog-file=target/catalog.json\n\n# New (1.x.x+)\ndbt-osmosis yaml refactor --string-length --catalog-path=target/catalog.json\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.h2,{id:"3---auto-apply-prompt-for-file-moves",children:["3. ",(0,r.jsx)(s.code,{children:"--auto-apply"})," Prompt for File Moves"]}),"\n",(0,r.jsxs)(s.p,{children:["In ",(0,r.jsx)(s.code,{children:"1.x.x"}),", both ",(0,r.jsx)(s.code,{children:"organize"})," and ",(0,r.jsx)(s.code,{children:"refactor"})," commands may prompt you to confirm file moves if dbt-osmosis detects a restructure operation. By default, it asks:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"Apply the restructure plan? [y/N]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"--auto-apply",children:(0,r.jsx)(s.code,{children:"--auto-apply"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Pass"})," ",(0,r.jsx)(s.code,{children:"--auto-apply"})," to automatically confirm and avoid prompts (helpful in CI/CD)."]}),"\n",(0,r.jsxs)(s.li,{children:["If you do ",(0,r.jsx)(s.strong,{children:"not"})," pass ",(0,r.jsx)(s.code,{children:"--auto-apply"}),", you will be prompted to confirm any file shuffle."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["This is a ",(0,r.jsx)(s.strong,{children:"behavioral"})," change: previously, ",(0,r.jsx)(s.code,{children:"organize"}),"/",(0,r.jsx)(s.code,{children:"refactor"})," would just move files without an interactive confirmation step."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.h2,{id:"4-seeds-must-have-dbt-osmosis-path",children:["4. Seeds Must Have ",(0,r.jsx)(s.code,{children:"+dbt-osmosis: <path>"})]}),"\n",(0,r.jsxs)(s.p,{children:["To manage seeds with dbt-osmosis in ",(0,r.jsx)(s.code,{children:"1.x.x"}),", you now ",(0,r.jsx)(s.strong,{children:"must"})," include a ",(0,r.jsx)(s.code,{children:"+dbt-osmosis"})," directive in your ",(0,r.jsx)(s.code,{children:"dbt_project.yml"})," seeds config. If it\u2019s missing, dbt-osmosis raises an exception."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Before"})," (pre-1.x.x), you might not have needed anything for seeds.",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.strong,{children:"Now"}),":"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:'seeds:\n  my_project:\n    +dbt-osmosis: "_schema.yml"\n'})}),"\n",(0,r.jsx)(s.p,{children:"Without this, seeds are not properly recognized for YAML syncing, and an error occurs."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"5-more-flexible-configuration-resolution",children:"5. More Flexible Configuration Resolution"}),"\n",(0,r.jsxs)(s.p,{children:["dbt-osmosis ",(0,r.jsx)(s.code,{children:"1.x.x"})," allows you to set options at multiple levels:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Global defaults / fallbacks"})," (via CLI flags)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Folder-level"})," (the preferred, canonical approach via ",(0,r.jsx)(s.code,{children:"+dbt-osmosis-options"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Node-level"})," (via ",(0,r.jsx)(s.code,{children:"config(dbt_osmosis_options=...)"})," in the ",(0,r.jsx)(s.code,{children:".sql"})," file)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Column-level"})," (via column ",(0,r.jsx)(s.code,{children:"meta:"})," in the schema file)"]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Why It Matters"}),": Now you can override or skip merges, re-lowercase columns, or specify prefixes to handle fuzzy matching\u2014",(0,r.jsx)(s.strong,{children:"all"})," at different granularities. This includes new keys like ",(0,r.jsx)(s.code,{children:"prefix"}),", or existing ones like ",(0,r.jsx)(s.code,{children:"output-to-lower"}),", or ",(0,r.jsx)(s.code,{children:"numeric-precision-and-scale"})," that you can apply per-node or per-column."]}),"\n",(0,r.jsx)(s.p,{children:"Example folder-level override:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:'models:\n  my_project:\n    staging:\n      +dbt-osmosis: "{parent}.yml"\n      +dbt-osmosis-options:\n        numeric-precision-and-scale: false\n        output-to-lower: true\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Example node-level override in ",(0,r.jsx)(s.code,{children:".sql"}),":"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:'{{ config(materialized="view", dbt_osmosis_options={"prefix": "account_"}) }}\n\nSELECT\n  id AS account_id,\n  ...\nFROM ...\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.h2,{id:"6-inheritance-defaults-no-overwriting-child-docs-without---force-inherit-descriptions",children:["6. Inheritance Defaults: No Overwriting Child Docs Without ",(0,r.jsx)(s.code,{children:"--force-inherit-descriptions"})]}),"\n",(0,r.jsxs)(s.p,{children:["In ",(0,r.jsx)(s.code,{children:"1.x.x"}),", ",(0,r.jsx)(s.strong,{children:"by default"}),", if your child model has ",(0,r.jsx)(s.strong,{children:"any"})," existing column description, dbt-osmosis ",(0,r.jsx)(s.strong,{children:"won\u2019t"})," override it with upstream docs. This is a shift from older versions where child descriptions might have been overwritten if upstream had a doc."]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"New"}),": Must pass ",(0,r.jsx)(s.code,{children:"--force-inherit-descriptions"})," to forcibly overwrite child docs with ancestor docs."]}),"\n",(0,r.jsxs)(s.li,{children:["The old ",(0,r.jsx)(s.code,{children:"osmosis_keep_description"})," approach is effectively ",(0,r.jsx)(s.strong,{children:"deprecated"})," (now a no-op). The new approach is simpler: child nodes keep their doc unless you specifically ",(0,r.jsx)(s.strong,{children:"force"})," override."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["Also, ",(0,r.jsx)(s.strong,{children:"meta"})," merges are more ",(0,r.jsx)(s.strong,{children:"additive"}),". Child meta keys are ",(0,r.jsx)(s.strong,{children:"merged"})," with upstream rather than overwriting them wholesale."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"7-new-plugin-system-for-fuzzy-matching",children:"7. New Plugin System for Fuzzy Matching"}),"\n",(0,r.jsxs)(s.p,{children:["dbt-osmosis ",(0,r.jsx)(s.code,{children:"1.x.x"})," adds a ",(0,r.jsx)(s.strong,{children:"plugin system"})," (via ",(0,r.jsx)(s.a,{href:"https://pluggy.readthedocs.io",children:"pluggy"}),") so you can supply custom logic for how to match/alias columns across the lineage. Built-in \u201cfuzzy\u201d logic includes:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Case transformations (upper, lower, camelCase, PascalCase)."}),"\n",(0,r.jsxs)(s.li,{children:["Prefix stripping (if you systematically rename columns like ",(0,r.jsx)(s.code,{children:"stg_contact_id \u2192 contact_id"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["If you have advanced naming patterns, you can ",(0,r.jsx)(s.strong,{children:"author"})," your own plugin that provides additional candidate column matches. This is a new feature and not strictly a breaking change, but important if you rely on custom inheritance logic."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"8-potential-pypi-release-changes",children:"8. Potential PyPI Release Changes"}),"\n",(0,r.jsxs)(s.p,{children:["We\u2019re planning to unify the stable release on ",(0,r.jsx)(s.code,{children:"1.1.x"})," and possibly ",(0,r.jsx)(s.strong,{children:"yank"})," any older ",(0,r.jsx)(s.code,{children:"1.0.0"})," from PyPI to reduce confusion. In short, ",(0,r.jsxs)(s.strong,{children:["if you see ",(0,r.jsx)(s.code,{children:"1.0.0"})]})," in the wild, upgrade directly to ",(0,r.jsx)(s.code,{children:"1.1.x"})," or later, because the final stable version has renamed flags and structured config."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h1,{id:"summary-of-breaking-changes",children:"Summary of Breaking Changes"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"vars.dbt-osmosis"})})," must nest sources under ",(0,r.jsx)(s.code,{children:"sources:"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Renamed CLI flags"}),":","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"--char-length"})," \u2192 ",(0,r.jsx)(s.code,{children:"--string-length"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"--numeric-precision"})," \u2192 ",(0,r.jsx)(s.code,{children:"--numeric-precision-and-scale"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"--catalog-file"})," \u2192 ",(0,r.jsx)(s.code,{children:"--catalog-path"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsxs)(s.strong,{children:[(0,r.jsx)(s.code,{children:"organize"}),"/",(0,r.jsx)(s.code,{children:"refactor"})]})," now prompt for file moves unless ",(0,r.jsx)(s.code,{children:"--auto-apply"})," is used."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Seeds"})," require a ",(0,r.jsx)(s.code,{children:"+dbt-osmosis: <path>"})," config."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Child descriptions"})," are ",(0,r.jsx)(s.strong,{children:"not"})," overwritten unless ",(0,r.jsx)(s.code,{children:"--force-inherit-descriptions"})," is specified (old ",(0,r.jsx)(s.code,{children:"osmosis_keep_description"})," is gone)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Meta merges"})," for child/parent are more additive (less overwriting)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"New plugin system"})," for fuzzy matching logic."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"recommended-upgrade-steps",children:"Recommended Upgrade Steps"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:["Update your ",(0,r.jsx)(s.code,{children:"dbt_project.yml"}),":"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Move source definitions under ",(0,r.jsx)(s.code,{children:"vars.dbt-osmosis.sources"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:["Add ",(0,r.jsx)(s.code,{children:"+dbt-osmosis: <path>"})," to your ",(0,r.jsx)(s.code,{children:"seeds:"})," section."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Scan for Old Flags"})," in scripts or docs:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Replace ",(0,r.jsx)(s.code,{children:"--char-length"}),", ",(0,r.jsx)(s.code,{children:"--numeric-precision"}),", ",(0,r.jsx)(s.code,{children:"--catalog-file"})," with the new equivalents."]}),"\n",(0,r.jsxs)(s.li,{children:["If you rely on no-prompt file moves, add ",(0,r.jsx)(s.code,{children:"--auto-apply"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Decide on Overwrite Strategy"}),":"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["If you want to preserve old behavior of forcing all child columns to adopt ancestor descriptions, pass ",(0,r.jsx)(s.code,{children:"--force-inherit-descriptions"}),"."]}),"\n",(0,r.jsx)(s.li,{children:"Otherwise, enjoy the new default: child docs remain if present."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Check Your Options"}),":"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Migrate any old ",(0,r.jsx)(s.code,{children:"dbt-osmosis"})," config keys (like prefix usage, skip-add-data-types, skip-merge-meta) into folder-level or node-level overrides as needed."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Explore the New Plugin System"}),":"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["If you have a complex naming strategy or want to adapt the built-in fuzzy match, you can write a ",(0,r.jsx)(s.strong,{children:"pluggy"})," plugin."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Verify"}),":"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Run ",(0,r.jsx)(s.code,{children:"dbt-osmosis yaml refactor --dry-run"})," in your project. Check the changes it would make."]}),"\n",(0,r.jsxs)(s.li,{children:["If everything looks good, run without ",(0,r.jsx)(s.code,{children:"--dry-run"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h1,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(s.p,{children:["With ",(0,r.jsx)(s.strong,{children:"dbt-osmosis 1.x.x"}),", the YAML management flow becomes ",(0,r.jsx)(s.strong,{children:"more declarative"})," and more ",(0,r.jsx)(s.strong,{children:"extensible"}),". The changes can require some minor updates to your ",(0,r.jsx)(s.code,{children:"dbt_project.yml"})," and any scripts using the older flags. However, once migrated:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["You gain ",(0,r.jsx)(s.strong,{children:"safer"})," merges (less overwriting child docs without intent),"]}),"\n",(0,r.jsxs)(s.li,{children:["A ",(0,r.jsx)(s.strong,{children:"cleaner"})," config approach for sources and ignoring columns,"]}),"\n",(0,r.jsxs)(s.li,{children:["And a ",(0,r.jsx)(s.strong,{children:"plugin system"})," for advanced rename logic."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["We hope this guide clarifies each step, so you can confidently move to ",(0,r.jsx)(s.strong,{children:"dbt-osmosis 1.x.x"})," and enjoy the new features and stability. If you encounter any issues, feel free to open a GitHub issue or consult the updated docs for additional help!"]})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>d});var i=n(6540);const r={},o=i.createContext(r);function l(e){const s=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(o.Provider,{value:s},e.children)}}}]);