"use strict";(self.webpackChunkdbt_osmosis=self.webpackChunkdbt_osmosis||[]).push([[602],{2284:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"tutorial-yaml/configuration","title":"Configuration","description":"Configuring dbt-osmosis","source":"@site/docs/tutorial-yaml/configuration.md","sourceDirName":"tutorial-yaml","slug":"/tutorial-yaml/configuration","permalink":"/dbt-osmosis/docs/tutorial-yaml/configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/z3z1ma/dbt-osmosis/tree/main/docs/docs/tutorial-yaml/configuration.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"dbt-osmosis - YAML","permalink":"/dbt-osmosis/docs/category/dbt-osmosis---yaml"},"next":{"title":"Context Variables","permalink":"/dbt-osmosis/docs/tutorial-yaml/context"}}');var i=n(4848),t=n(8453);const l={sidebar_position:1},r="Configuration",d={},c=[{value:"Configuring dbt-osmosis",id:"configuring-dbt-osmosis",level:2},{value:"Models",id:"models",level:3},{value:"Sources",id:"sources",level:3},{value:"Fine-Grained Control Over Behavior",id:"fine-grained-control-over-behavior",level:2},{value:"1. Global Options via Command Line Flags",id:"1-global-options-via-command-line-flags",level:3},{value:"2. Folder-Level +dbt-osmosis-options",id:"2-folder-level-dbt-osmosis-options",level:3},{value:"3. Node-Level Config in the SQL File",id:"3-node-level-config-in-the-sql-file",level:3},{value:"4. Per-Column Meta",id:"4-per-column-meta",level:3},{value:"Examples of Commonly Used dbt-osmosis Options",id:"examples-of-commonly-used-dbt-osmosis-options",level:2},{value:"Summary",id:"summary",level:2}];function a(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"configuration",children:"Configuration"})}),"\n",(0,i.jsx)(s.h2,{id:"configuring-dbt-osmosis",children:"Configuring dbt-osmosis"}),"\n",(0,i.jsx)(s.h3,{id:"models",children:"Models"}),"\n",(0,i.jsxs)(s.p,{children:["At a minimum, each ",(0,i.jsx)(s.strong,{children:"folder"})," (or subfolder) of models in your dbt project must specify ",(0,i.jsx)(s.strong,{children:"where"})," dbt-osmosis should place the YAML files, using the ",(0,i.jsx)(s.code,{children:"+dbt-osmosis"})," directive:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-yaml",metastring:'title="dbt_project.yml"',children:'models:\n  <your_project_name>:\n    +dbt-osmosis: "_{model}.yml"   # Default for entire project\n\n    staging:\n      +dbt-osmosis: "{parent}.yml" # Each subfolder lumps docs by folder name\n\n    intermediate:\n      # Example of using node.config or node.tags\n      +dbt-osmosis: "{node.config[materialized]}/{model}.yml"\n\n    marts:\n      # A single schema file for all models in \'marts\'\n      +dbt-osmosis: "prod.yml"\n'})}),"\n",(0,i.jsxs)(s.p,{children:["You can also apply it to ",(0,i.jsx)(s.strong,{children:"seeds"})," exactly the same way:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-yaml",metastring:'title="dbt_project.yml"',children:'seeds:\n  <your_project_name>:\n    +dbt-osmosis: "_schema.yml"\n'})}),"\n",(0,i.jsx)(s.p,{children:"This ensures seeds also end up with automatically created YAML schemas."}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"sources",children:"Sources"}),"\n",(0,i.jsxs)(s.p,{children:["Optionally, you can configure dbt-osmosis to manage ",(0,i.jsx)(s.strong,{children:"sources"})," by specifying an entry under ",(0,i.jsx)(s.code,{children:"vars.dbt-osmosis.sources"}),". For each source you want managed:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-yaml",metastring:'title="dbt_project.yml"',children:'vars:\n  dbt-osmosis:\n    sources:\n      salesforce:\n        path: "staging/salesforce/source.yml"\n        schema: "salesforce_v2"  # If omitted, defaults to the source name\n\n      marketo: "staging/customer/marketo.yml"\n      jira: "staging/project_mgmt/schema.yml"\n      github: "all_sources/github.yml"\n\n  # (Optional) columns that match these patterns will be ignored\n  column_ignore_patterns:\n    - "_FIVETRAN_SYNCED"\n    - ".*__key__.namespace"\n'})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Key Points"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"vars: dbt-osmosis: sources: <source_name>"})," sets ",(0,i.jsx)(s.strong,{children:"where"})," the source YAML file lives."]}),"\n",(0,i.jsxs)(s.li,{children:["If the source doesn't exist yet, dbt-osmosis can ",(0,i.jsx)(s.strong,{children:"bootstrap"})," that YAML automatically when you run ",(0,i.jsx)(s.code,{children:"yaml organize"})," or ",(0,i.jsx)(s.code,{children:"yaml refactor"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"schema: salesforce_v2"})," overrides the default schema name if desired. If you omit it, dbt-osmosis assumes your source name is the schema name."]}),"\n",(0,i.jsxs)(s.li,{children:["Patterns in ",(0,i.jsx)(s.code,{children:"column_ignore_patterns"})," let you skip ephemeral or system columns across your entire project."]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"fine-grained-control-over-behavior",children:"Fine-Grained Control Over Behavior"}),"\n",(0,i.jsxs)(s.p,{children:["Beyond ",(0,i.jsx)(s.strong,{children:"where"})," to place files, dbt-osmosis provides many ",(0,i.jsx)(s.strong,{children:"tunable options"})," for how it handles column injection, data types, inheritance, etc. You can specify these in ",(0,i.jsx)(s.strong,{children:"multiple levels"}),"\u2014globally, folder-level, node-level, or even per-column. dbt-osmosis merges them in a chain, so the most specific setting \u201cwins.\u201d"]}),"\n",(0,i.jsx)(s.h3,{id:"1-global-options-via-command-line-flags",children:"1. Global Options via Command Line Flags"}),"\n",(0,i.jsx)(s.p,{children:"You can declare project-wide defaults using command line flags when running the dbt-osmosis CLI:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sh",children:"dbt-osmosis yaml refactor \\\n  --skip-add-columns \\\n  --skip-add-data-types \\\n  --skip-merge-meta \\\n  --skip-add-tags \\\n  --numeric-precision-and-scale \\\n  --string-length \\\n  --force-inherit-descriptions \\\n  --output-to-lower \\\n  --add-progenitor-to-meta \\\n  --sort-by=database\n"})}),"\n",(0,i.jsxs)(s.p,{children:["These ",(0,i.jsx)(s.strong,{children:"global"})," settings apply to ",(0,i.jsx)(s.strong,{children:"all"})," models and sources unless overridden at a lower level."]}),"\n",(0,i.jsx)(s.h3,{id:"2-folder-level-dbt-osmosis-options",children:"2. Folder-Level +dbt-osmosis-options"}),"\n",(0,i.jsxs)(s.p,{children:["This is the canonical approach in 1.1 forward. Inside ",(0,i.jsx)(s.code,{children:"dbt_project.yml"}),", you can attach ",(0,i.jsx)(s.code,{children:"+dbt-osmosis-options"})," to a subfolder:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-yaml",metastring:'title="dbt_project.yml"',children:'models:\n  my_project:\n    # Blanket rule for entire project\n    +dbt-osmosis: "_{model}.yml"\n\n    staging:\n      +dbt-osmosis: "{parent}.yml"\n      +dbt-osmosis-options:\n        skip-add-columns: true\n        skip-add-data-types: false\n        # Reorder columns alphabetically\n        sort-by: "alphabetical"\n\n    intermediate:\n      +dbt-osmosis: "{node.config[materialized]}/{model}.yml"\n      +dbt-osmosis-options:\n        skip-add-tags: true\n        output-to-lower: true\n      +dbt-osmosis-sort-by: "alphabetical" # Flat keys work too\n'})}),"\n",(0,i.jsxs)(s.p,{children:["This means everything in the ",(0,i.jsx)(s.code,{children:"staging"})," folder will skip adding ",(0,i.jsx)(s.strong,{children:"new"})," columns from the database, reorder existing columns alphabetically, but ",(0,i.jsx)(s.strong,{children:"won\u2019t"})," skip data types (the default from the global level stands). Meanwhile, ",(0,i.jsx)(s.code,{children:"intermediate"})," models skip adding tags and convert all columns/data types to lowercase."]}),"\n",(0,i.jsx)(s.h3,{id:"3-node-level-config-in-the-sql-file",children:"3. Node-Level Config in the SQL File"}),"\n",(0,i.jsxs)(s.p,{children:["You can also specify ",(0,i.jsx)(s.strong,{children:"node-level"})," overrides in the ",(0,i.jsx)(s.code,{children:".sql"})," file via dbt\u2019s ",(0,i.jsx)(s.code,{children:"config(...)"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-jinja",children:'-- models/intermediate/some_model.sql\n{{ config(\n    materialized=\'incremental\',\n    dbt_osmosis_options={\n      "skip-add-data-types": True,\n      "sort-by": "alphabetical"\n    }\n) }}\n\nSELECT * FROM ...\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Here, we\u2019re telling dbt-osmosis that for ",(0,i.jsx)(s.strong,{children:"this"})," model specifically, skip adding data types and sort columns alphabetically. This merges on top of any folder-level or global-level config."]}),"\n",(0,i.jsx)(s.h3,{id:"4-per-column-meta",children:"4. Per-Column Meta"}),"\n",(0,i.jsxs)(s.p,{children:["If you want to override dbt-osmosis behavior for a ",(0,i.jsx)(s.strong,{children:"specific column"})," only, you can do so in your schema YAML:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-yaml",children:'models:\n  - name: some_model\n    columns:\n      - name: tricky_column\n        description: "This column is weird, do not reorder me"\n        meta:\n          dbt-osmosis-skip-add-data-types: true\n          dbt_osmosis_options:\n            skip-add-tags: true\n'})}),"\n",(0,i.jsx)(s.p,{children:"Or in your node\u2019s dictionary-based definition. dbt-osmosis checks:"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:'column.meta["dbt-osmosis-skip-add-data-types"]'})," or ",(0,i.jsx)(s.code,{children:'column.meta["dbt_osmosis_skip_add_data_types"]'})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:'column.meta["dbt-osmosis-options"]'})," or ",(0,i.jsx)(s.code,{children:"dbt_osmosis_options"})]}),"\n",(0,i.jsxs)(s.li,{children:["Then your ",(0,i.jsx)(s.strong,{children:"node"})," meta/config"]}),"\n",(0,i.jsx)(s.li,{children:"Then folder-level"}),"\n",(0,i.jsx)(s.li,{children:"Finally global project-level"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"At each level, dbt-osmosis merges or overrides as needed."}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"examples-of-commonly-used-dbt-osmosis-options",children:"Examples of Commonly Used dbt-osmosis Options"}),"\n",(0,i.jsxs)(s.p,{children:["Below is a reference table of some popular flags or options you can set at ",(0,i.jsx)(s.strong,{children:"any"})," of the levels (global, folder, node, column). Many of these are also available as CLI flags, but when set in your configuration, they become \u201cdefaults.\u201d"]}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Option Name"}),(0,i.jsx)(s.th,{children:"Purpose"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"skip-add-columns"})}),(0,i.jsxs)(s.td,{children:["If ",(0,i.jsx)(s.code,{children:"true"}),", dbt-osmosis won\u2019t inject columns that exist in the warehouse but are missing in your YAML."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"skip-add-source-columns"})}),(0,i.jsxs)(s.td,{children:["If ",(0,i.jsx)(s.code,{children:"true"}),", skip column injection ",(0,i.jsx)(s.strong,{children:"specifically"})," on sources. Useful if sources have wide schemas and you only want columns for models."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"skip-add-data-types"})}),(0,i.jsxs)(s.td,{children:["If ",(0,i.jsx)(s.code,{children:"true"}),", dbt-osmosis won\u2019t populate the ",(0,i.jsx)(s.code,{children:"data_type"})," field for columns."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"skip-merge-meta"})}),(0,i.jsxs)(s.td,{children:["If ",(0,i.jsx)(s.code,{children:"true"}),", dbt-osmosis won\u2019t inherit or merge ",(0,i.jsx)(s.code,{children:"meta"})," fields from upstream models."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"skip-add-tags"})}),(0,i.jsxs)(s.td,{children:["If ",(0,i.jsx)(s.code,{children:"true"}),", dbt-osmosis won\u2019t inherit or merge ",(0,i.jsx)(s.code,{children:"tags"})," from upstream models."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"numeric-precision-and-scale"})}),(0,i.jsxs)(s.td,{children:["If ",(0,i.jsx)(s.code,{children:"true"}),", numeric columns will keep precision/scale in their type (like ",(0,i.jsx)(s.code,{children:"NUMBER(38, 8)"})," vs. ",(0,i.jsx)(s.code,{children:"NUMBER"}),")."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"string-length"})}),(0,i.jsxs)(s.td,{children:["If ",(0,i.jsx)(s.code,{children:"true"}),", string columns will keep length in their type (like ",(0,i.jsx)(s.code,{children:"VARCHAR(256)"})," vs. ",(0,i.jsx)(s.code,{children:"VARCHAR"}),")."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"force-inherit-descriptions"})}),(0,i.jsxs)(s.td,{children:["If ",(0,i.jsx)(s.code,{children:"true"}),", a child model\u2019s columns will always accept upstream descriptions if the child\u2019s description is ",(0,i.jsx)(s.strong,{children:"empty"})," or a placeholder."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"output-to-lower"})}),(0,i.jsxs)(s.td,{children:["If ",(0,i.jsx)(s.code,{children:"true"}),", all column names and data types in the YAML become lowercase."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"sort-by"})}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"database"})," or ",(0,i.jsx)(s.code,{children:"alphabetical"}),". Tells dbt-osmosis how to reorder columns."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"prefix"})}),(0,i.jsxs)(s.td,{children:["A special string used by the ",(0,i.jsx)(s.strong,{children:"fuzzy"})," matching plugin. If you consistently prefix columns in staging, dbt-osmosis can strip it when matching."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"add-inheritance-for-specified-keys"})}),(0,i.jsxs)(s.td,{children:["Provide a list of ",(0,i.jsx)(s.strong,{children:"additional"})," keys (e.g., ",(0,i.jsx)(s.code,{children:'["policy_tags"]'}),") that should also be inherited from upstream."]})]})]})]}),"\n",(0,i.jsxs)(s.p,{children:["And much more. Many flags also exist as ",(0,i.jsx)(s.strong,{children:"command-line"})," arguments (",(0,i.jsx)(s.code,{children:"--skip-add-tags"}),", ",(0,i.jsx)(s.code,{children:"--skip-merge-meta"}),", ",(0,i.jsx)(s.code,{children:"--force-inherit-descriptions"}),", etc.), which can override or complement your config settings in ",(0,i.jsx)(s.code,{children:"dbt_project.yml"}),"."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"dbt-osmosis"})," configuration is highly ",(0,i.jsx)(s.strong,{children:"modular"}),". You:"]}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Always"})," specify a ",(0,i.jsx)(s.code,{children:'+dbt-osmosis: "<some_path>.yml"'})," directive per folder (so osmosis knows where to place YAML)."]}),"\n",(0,i.jsxs)(s.li,{children:["Set ",(0,i.jsx)(s.strong,{children:"options"})," (like skipping columns, adding data types, etc.) ",(0,i.jsx)(s.strong,{children:"globally"})," via either cli flags, a more granular ",(0,i.jsx)(s.strong,{children:"folder-level"})," with ",(0,i.jsx)(s.code,{children:"+dbt-osmosis-options"}),", ",(0,i.jsx)(s.strong,{children:"node-level"})," in ",(0,i.jsx)(s.code,{children:".sql"}),", or ",(0,i.jsx)(s.strong,{children:"column-level"})," in metadata."]}),"\n",(0,i.jsxs)(s.li,{children:["Let dbt-osmosis handle the merging and logic so that the final outcome respects your most ",(0,i.jsx)(s.strong,{children:"specific"})," settings."]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"With this approach, you can achieve everything from a simple one-YAML-per-model style to a more advanced structure that merges doc from multiple upstream sources while selectively skipping columns or data types."})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>r});var o=n(6540);const i={},t=o.createContext(i);function l(e){const s=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),o.createElement(t.Provider,{value:s},e.children)}}}]);